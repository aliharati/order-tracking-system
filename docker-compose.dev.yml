version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: order-tracking-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - order-tracking-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: order-tracking-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${ORDERTRACKING_USER}:${ORDERTRACKING_PASSWORD}@db:5432/${ORDERTRACKING_DB}?schema=public
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - order-tracking-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: order-tracking-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_BASEURL=http://localhost:5000
      - NEXT_PUBLIC_API_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - order-tracking-network

networks:
  order-tracking-network:
    driver: bridge

volumes:
  postgres_data:
