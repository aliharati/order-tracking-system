generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  notifications Notification[]

  @@map("users")
  @@index([role])
  @@index([isActive])
  @@index([email])
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  customerId  String
  title       String
  description String?
  status      OrderStatus @default(PENDING)
  priority    Priority    @default(MEDIUM)
  estimatedCompletion DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  customer      User            @relation(fields: [customerId], references: [id])
  mediaFiles    MediaFile[]
  orderHistory  OrderHistory[]
  notifications Notification[]

  @@map("orders")
  @@index([customerId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([customerId, status])
  @@index([status, createdAt])
  @@index([orderNumber])
}

model MediaFile {
  id           String      @id @default(uuid())
  orderId      String
  fileName     String
  originalName String
  mimeType     String
  size         Int
  path         String
  cloudinaryId String?
  uploadedBy   String
  fileType     FileType
  isPublic     Boolean     @default(false)
  description  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("media_files")
  @@index([orderId])
  @@index([uploadedBy])
  @@index([mimeType])
  @@index([fileType])
  @@index([isPublic])
  @@index([createdAt])
}

model OrderHistory {
  id        String      @id @default(uuid())
  orderId   String
  status    OrderStatus
  comment   String?
  changedBy String
  metadata  Json?
  createdAt DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_history")
  @@index([orderId])
  @@index([changedBy])
  @@index([orderId, createdAt])
  @@index([status])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  orderId   String?
  type      NotificationType @default(ORDER_UPDATE)
  title     String
  message   String
  isRead    Boolean          @default(false)
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("notifications")
  @@index([userId])
  @@index([userId, isRead])
  @@index([orderId])
  @@index([type])
  @@index([createdAt])
  @@index([isRead, createdAt])
}

model ApiKey {
  id        String   @id @default(uuid())
  name      String
  keyHash   String   @unique
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
  @@index([keyHash])
  @@index([isActive])
}

enum UserRole {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FileType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
  OTHER
}

enum NotificationType {
  ORDER_UPDATE
  ORDER_COMPLETED
  SYSTEM_ALERT
  REMINDER
}
